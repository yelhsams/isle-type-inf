;; (model Reg (type (bv)))
;; (type Reg (primitive Reg))
;; (type WritableReg (primitive WritableReg))
;; (type bool (primitive bool))
;; (extern const $true bool)
;; (extern const $false bool)
;; (model u8 (type (bv 8)))
;; (type u8 (primitive u8))
;; (type Inst (primitive Inst))
;; (model InstOutput (type (bv)))
;; (type InstOutput (primitive InstOutput))
;; (model Type (type Int))
;; (type Type (primitive Type))
;; (extern const $I8 Type)
;; (extern const $I16 Type)
;; (extern const $I32 Type)
;; (extern const $I64 Type)
;; (extern const $I128 Type)
;; (type Unit (primitive Unit))
;; (model Value (type (bv)))
;; (type Value (primitive Value))

;; (type Opcode extern
;;     (enum
;;         Jump
;;         Brif
;;         BrTable
;;         Debugtrap
;;         Trap
;;         Trapz
;;         ResumableTrap
;;         Trapnz
;;         ResumableTrapnz
;;         Return
;;         Call
;;         CallIndirect
;;         ReturnCall
;;         ReturnCallIndirect
;;         FuncAddr
;;         Splat
;;         Swizzle
;;         X86Pshufb
;;         Insertlane
;;         Extractlane
;;         Smin
;;         Umin
;;         Smax
;;         Umax
;;         AvgRound
;;         UaddSat
;;         SaddSat
;;         UsubSat
;;         SsubSat
;;         Load
;;         Store
;;         Uload8
;;         Sload8
;;         Istore8
;;         Uload16
;;         Sload16
;;         Istore16
;;         Uload32
;;         Sload32
;;         Istore32
;;         Uload8x8
;;         Sload8x8
;;         Uload16x4
;;         Sload16x4
;;         Uload32x2
;;         Sload32x2
;;         StackLoad
;;         StackStore
;;         StackAddr
;;         DynamicStackLoad
;;         DynamicStackStore
;;         DynamicStackAddr
;;         GlobalValue
;;         SymbolValue
;;         TlsValue
;;         GetPinnedReg
;;         SetPinnedReg
;;         GetFramePointer
;;         GetStackPointer
;;         GetReturnAddress
;;         TableAddr
;;         Iconst
;;         F32const
;;         F64const
;;         Vconst
;;         Shuffle
;;         Null
;;         Nop
;;         Select
;;         SelectSpectreGuard
;;         Bitselect
;;         X86Blendv
;;         VanyTrue
;;         VallTrue
;;         VhighBits
;;         Icmp
;;         IcmpImm
;;         Iadd
;;         Isub
;;         Ineg
;;         Iabs
;;         Imul
;;         Umulhi
;;         Smulhi
;;         SqmulRoundSat
;;         X86Pmulhrsw
;;         Udiv
;;         Sdiv
;;         Urem
;;         Srem
;;         IaddImm
;;         ImulImm
;;         UdivImm
;;         SdivImm
;;         UremImm
;;         SremImm
;;         IrsubImm
;;         IaddCin
;;         IaddCarry
;;         UaddOverflow
;;         SaddOverflow
;;         UsubOverflow
;;         SsubOverflow
;;         UmulOverflow
;;         SmulOverflow
;;         UaddOverflowTrap
;;         IsubBin
;;         IsubBorrow
;;         Band
;;         Bor
;;         Bxor
;;         Bnot
;;         BandNot
;;         BorNot
;;         BxorNot
;;         BandImm
;;         BorImm
;;         BxorImm
;;         Rotl
;;         Rotr
;;         RotlImm
;;         RotrImm
;;         Ishl
;;         Ushr
;;         Sshr
;;         IshlImm
;;         UshrImm
;;         SshrImm
;;         Bitrev
;;         Clz
;;         Cls
;;         Ctz
;;         Bswap
;;         Popcnt
;;         Fcmp
;;         Fadd
;;         Fsub
;;         Fmul
;;         Fdiv
;;         Sqrt
;;         Fma
;;         Fneg
;;         Fabs
;;         Fcopysign
;;         Fmin
;;         Fmax
;;         Ceil
;;         Floor
;;         Trunc
;;         Nearest
;;         IsNull
;;         IsInvalid
;;         Bitcast
;;         ScalarToVector
;;         Bmask
;;         Ireduce
;;         Snarrow
;;         Unarrow
;;         Uunarrow
;;         SwidenLow
;;         SwidenHigh
;;         UwidenLow
;;         UwidenHigh
;;         IaddPairwise
;;         X86Pmaddubsw
;;         Uextend
;;         Sextend
;;         Fpromote
;;         Fdemote
;;         Fvdemote
;;         FvpromoteLow
;;         FcvtToUint
;;         FcvtToSint
;;         FcvtToUintSat
;;         FcvtToSintSat
;;         X86Cvtt2dq
;;         FcvtFromUint
;;         FcvtFromSint
;;         Isplit
;;         Iconcat
;;         AtomicRmw
;;         AtomicCas
;;         AtomicLoad
;;         AtomicStore
;;         Fence
;;         ExtractVector
;;     )
;; )

;; (type InstructionData extern
;;     (enum
;;         (Unary (opcode Opcode) (arg Value))
;;     )
;; )

;; (spec (ty_bits x) (provide (= result (int2bv 8 x))))
;; (decl pure ty_bits (Type) u8)
;; (extern constructor ty_bits ty_bits)

;; (decl inst_data (InstructionData) Inst)
;; (extern extractor infallible inst_data inst_data)

;; (decl emit (MInst) Unit)
;; (extern constructor emit emit)

;; (decl temp_writable_reg (Type) WritableReg)
;; (extern constructor temp_writable_reg temp_writable_reg)
;; (spec (temp_writable_reg ty) (provide (= ty (widthof result))))

;; (decl first_result (Value) Inst)
;; (extern extractor first_result first_result)

;; (spec (value_type arg) (provide (= arg (widthof result))))
;; (decl value_type (Type) Value)
;; (extern extractor infallible value_type value_type)

;; (decl result_type (Type) Inst)
;; (extractor (result_type ty)
;;            (first_result (value_type ty)))

;; (spec (has_type ty arg)
;;       (provide (= result arg))
;;       (require (= ty (widthof arg))))
;; (decl has_type (Type Inst) Inst)
;; (extractor (has_type ty inst)
;;            (and (result_type ty)
;;                 inst))

;; (spec (fits_in_64 arg)
;;       (provide (= result arg))
;;       (require (<= arg 64)))
;; (decl fits_in_64 (Type) Type)
;; (extern extractor fits_in_64 fits_in_64)

;; (decl uextend (Value) Inst)
;; (extractor
;;     (uextend x)
;;     (inst_data (InstructionData.Unary (Opcode.Uextend) x))
;; )


(spec (lower arg)
    (provide (= result arg)))
(decl lower (Inst) InstOutput)

;; Instruction formats.
(type MInst
  (enum
    ;; A sign- or zero-extend operation.
    (Extend
      (rd WritableReg)
      (rn Reg)
      (signed bool)
      (from_bits u8)
      (to_bits u8))
))

;; Helper for emitting `MInst.Extend` instructions.
;; BROKEN: zero_ext and sign_ext swapped
(spec (extend a b c d)
  (provide 
    (if b
        (= result (zero_ext (bv2int d) (conv_to (bv2int c) a)))
        (= result (sign_ext (bv2int d) (conv_to (bv2int c) a))))))
(decl extend (Reg bool u8 u8) Reg)
(rule (extend rn signed from_bits to_bits)
      (let ((dst WritableReg (temp_writable_reg $I64))
            (_ Unit (emit (MInst.Extend dst rn signed from_bits to_bits))))
        dst))

;; General rule for extending input to an output which fits in a single
;; register.
(rule (lower (has_type (fits_in_64 out) (uextend x @ (value_type in))))
      (extend x $false (ty_bits in) (ty_bits out)))

;; print just the variables (out --> type _), (in --> type _),
;; [bv64](lower [bv8]) 
;; []

;; integrated
;; more tests
;; send Alexa rules 