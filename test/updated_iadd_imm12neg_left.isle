(model Type (type Int))
(type Type (primitive Type))

(model Value (type (bv)))
(type Value (primitive Value))

(model Inst (type (bv)))
(type Inst (primitive Inst))

(model InstOutput (type (bv)))
(type InstOutput (primitive InstOutput))

(model Reg (type (bv)))
(type Reg (primitive Reg))

(spec (lower arg) (provide (= result arg)))
(decl lower (Inst) InstOutput)

(type MInst
  (enum
))

(spec (value_type arg) (provide (= arg (widthof result))))
(decl value_type (Type) Value)
(extern extractor infallible value_type value_type)

(decl first_result (Value) Inst)
(extern extractor first_result first_result)

(decl result_type (Type) Inst)
(extractor (result_type ty)
           (first_result (value_type ty)))

(spec (has_type ty arg)
      (provide (= result arg))
      (require (= ty (widthof arg))))
(decl has_type (Type Inst) Inst)
(extractor (has_type ty inst)
           (and (result_type ty)
                inst))

(spec (fits_in_64 arg)
      (provide (= result arg))
      (require (<= arg 64)))
(decl fits_in_64 (Type) Type)
(extern extractor fits_in_64 fits_in_64)

;; Imm12 modeled as the range of intermediates it can represent.
(model Imm12 (type (bv 24)))
(type Imm12 (primitive Imm12))

(type ALUOp
  (enum
    (Sub)
))

(spec (sub_imm ty a b)
  (provide
    (= result
       (if (<= ty 32)
           (conv_to 64 (bvsub (extract 31 0 a) (zero_ext 32 b)))
           (bvsub a (zero_ext 64 b)))))
  (require (or (bvult (zero_ext 64 b) #x0000000000000fff)
                (and (bvult (zero_ext 64 b) #x0000000000fff000)
                     (= (extract 2 0 (zero_ext 64 b)) #b000)))
            (= (widthof b) 24)))
(decl sub_imm (Type Reg Imm12) Reg)
(rule (sub_imm ty x y) (alu_rr_imm12 (ALUOp.Sub) ty x y))

(decl alu_rr_imm12 (ALUOp Type Reg Imm12) Reg)
(extern constructor alu_rr_imm12 alu_rr_imm12)

(spec (imm12_from_negated_value arg)
    (provide (or (bvult (bvneg (sign_ext 64 arg)) #x0000000000000fff)
                    (and (bvult (bvneg (sign_ext 64 arg)) #x0000000000fff000)
                        (= (extract 2 0 (bvneg (sign_ext 64 arg))) #b000)))
                (= result (extract 23 0 (bvneg (sign_ext 64 arg))))))
(instantiate imm12_from_negated_value
    ((args (bv 8)) (ret (bv 24)) (canon (bv 8)))
    ((args (bv 16)) (ret (bv 24)) (canon (bv 16)))
    ((args (bv 32)) (ret (bv 24)) (canon (bv 32)))
    ((args (bv 64)) (ret (bv 24)) (canon (bv 64)))
)
(decl pure partial imm12_from_negated_value (Value) Imm12)
(extern extractor imm12_from_negated_value imm12_from_negated_value)

(rule 3 (lower (has_type (fits_in_64 ty) (iadd x y)))
       (if-let imm12_neg (imm12_from_negated_value x))
       (sub_imm ty y imm12_neg))
